const AWS = require('aws-sdk');
const fs = require('fs');
const { exec } = require('child_process');
const path = require('path');
AWS.config.update({ region: 'us-east-2' });
const s3 = new AWS.S3();
const INPUT_BUCKET = 'convertone1';
const OUTPUT_BUCKET = 'converttwo2';
const INCOMING_DIR = '/home/ubuntu/incoming_files';
const CONVERTED_DIR = '/home/ubuntu/converted_files';
if (!fs.existsSync(INCOMING_DIR)) fs.mkdirSync(INCOMING_DIR, { recursive: true });
if (!fs.existsSync(CONVERTED_DIR)) fs.mkdirSync(CONVERTED_DIR, { recursive: true });
async function downloadFile(key) {
  const params = {
    Bucket: INPUT_BUCKET,
    Key: key,
  };
  try {
    const data = await s3.getObject(params).promise();
    const downloadPath = path.join(INCOMING_DIR, path.basename(key));
    fs.writeFileSync(downloadPath, data.Body);
    console.log('Downloaded from S3:', downloadPath);
    return downloadPath;
  } catch (err) {
    throw new Error(`Failed to download file: ${err.message}`);
  }
}
function convertFile(filePath) {
  return new Promise((resolve, reject) => {
    const outputFile = path.join(CONVERTED_DIR, `${path.parse(filePath).name}.pdf`);
    const command = `libreoffice --headless --convert-to pdf --outdir "${CONVERTED_DIR}" "${filePath}"`;
    exec(command, (err, stdout, stderr) => {
      if (err) {
        return reject(new Error(`Conversion failed: ${stderr || err.message}`));
      }
      console.log('Converted file:', stdout);
      resolve(outputFile);
    });
  });
}
async function uploadConvertedFile(filePath) {
  try {
    const fileBuffer = fs.readFileSync(filePath);
    const uploadParams = {
      Bucket: OUTPUT_BUCKET,
      Key: path.basename(filePath),
      Body: fileBuffer,
      ContentType: 'application/pdf',
    };
    await s3.upload(uploadParams).promise();
    console.log('Uploaded to S3:', `${OUTPUT_BUCKET}/${uploadParams.Key}`);
  } catch (err) {
    throw new Error(`Failed to upload converted file: ${err.message}`);
  }
}
async function checkNewFiles() {
  const params = {
    Bucket: INPUT_BUCKET,
    MaxKeys: 1, 
  };
  try {
    const data = await s3.listObjectsV2(params).promise();
    if (data.Contents && data.Contents.length > 0) {
      const file = data.Contents[0];
      const fileKey = file.Key;
      console.log('Detected new file:', fileKey);
      const filePath = await downloadFile(fileKey);
      const convertedFilePath = await convertFile(filePath);
      await uploadConvertedFile(convertedFilePath);
      console.log(' File processing complete.');
    }
  } catch (err) {
    console.error('Error:', err.message);
  }
}
setInterval(checkNewFiles, 60000);  
